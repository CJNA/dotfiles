# .always_forget.txt
#
# awdeorio's notes on UNIX commands

# Users and Groups
adduser john                                      # add user w/ system defaults
useradd -m -G users,wheel,audio -s /bin/bash john # add new user manually
usermod -u UID username                           # change UID
usermod -g GID username                           # change default group
groupmod -g GID group                             # change GID of group
gpasswd -a awdeorio audio                         # add awdeorio to audio group
smbpasswd -a username                             # new Samba users
chsh -s /bin/bash username                        # change default shell
id                                                # print user and group ID #'s

# Manual network configuration (DHCP)
killall dhcpcd
ifconfig eth1 down
ifconfig eth1 hw ether '00:16:cb:05:3b:10'  # spoof MAC addr
iwconfig eth1 key s:nebardupover3
iwconfig eth1 essid DeOrio
ifconfig eth1 up
dhcpcd -t 10 -N eth1

# Manual network configuration (static IP)
nmap -sP '141.212.106.*'  # see what IP addresses are inuse
dig -x 141.212.106.7      # verify that my IP is not in DHCP space
ifconfig eth0 down
ifconfig eth0 141.212.106.7 broadcast 141.212.106.255 netmask 0xffffff80 up
route add default gw 141.212.106.1
edit /etc/resolv.conf
  > search eecs.umich.edu
  > nameserver 141.213.4.4
  > nameserver 141.213.4.5
  > nameserver 141.213.13.31

# Network Utilities
hostname                           # name of this computer
host www.google.com                # DNS lookup
nmap -A -T4 snoopy.eecs.umich.edu  # what ports are open?
netstat -atn | grep ':22'          # how many ssh connections on this machine?
netstat -l numeric-ports | grep 80 # what's using port 80?
sudo fuser -v -n tcp 80            # who's using port 80?
nc -v SERVER 9559                  # check connection to SERVER on port 9559
nc SERVER 8083                     # connect to server "cat over a socket"
nc -l SERVER PORT                  # start a server, good for testing firewalls
wget https://www.google.com/       # download one page
wget -m andrewdeorio.com           # download everything
traceroute                         # print route packets take to network host
curl --verbose                     # watch protocol in action
curl --trace-ascii log.txt         # watch protocol in action, more detail
curl --trace-ascii log.txt --trace-time # include timing
telnet HOST 80                     # connect to web server

# Audio
alsamixer                               # change volume
amixer -c 0 sset Master '6%+'           # change volume
amixer -c 0 sset Headphone toggle       # toggle speakers/headphones
mplayer "$(ls | shuf -n1)"              # select and play a random file

# Video
# Read video device live
mplayer tv:// -tv driver=v4l2:width=352:height=288:device=/dev/video0 -fps 20
mplayer tv://
# Record video only
mencoder tv:// -tv driver=v4l2:width=352:height=288:device=/dev/video0 -fps 20 -nosound -ovc lavc -o file.avi
# Record video+sound
mencoder tv:// -tv driver=v4l2:width=352:height=288:device=/dev/video0:forceaudio:adevice=/dev/dsp -fps 20 -ovc lavc -oac mp3lame -lameopts cbr:br=64:mode=3 -o file.avi
# convert VOB file (from a DVD) to mp4   http://stackoverflow.com/questions/13560852/convert-mp4-to-maximum-mobile-supported-mp4-using-ffmpeg
ffmpeg -i concat:"/media/dvd/VIDEO_TS/VTS_01_1.VOB|/media/dvd/VIDEO_TS/VTS_01_2.VOB" -acodec libfaac -aq 100 -ac 2 -vcodec libx264 -vpre slow -crf 24 -threads 0 output.mp4
# compress mp4 video to 480p at 500kbit/s mp4
ffmpeg -i /Users/awdeorio/Dropbox/housing/818_Starwick_Sewer_Video.mp4 -vcodec libx264 -vprofile high -preset slow -b:v 500k -maxrate 500k -bufsize 1000k -vf scale=-1:480 -threads 0 -b:a 128k output_file_480p.mp4
# compress mp4 video to 360p at 250kbit/s mp4
ffmpeg -i /Users/awdeorio/Dropbox/housing/818_Starwick_Sewer_Video.mp4 -vcodec libx264 -vprofile baseline -preset slow -b:v 250k -maxrate 250k -bufsize 500k -vf scale=-1:360 -threads 0 -ab 96k output_360p.mp4

# Images
mogrify -rotate 90                     # rotate
mogrify -resize 640x640                # reduce resolution
exiftool                               # read all exif data
exiftool '-AllDates+=3:02:00 00:00:00' photo.jpg  # date/time += 3 yr 2 mos

# ssh
ssh -vT SERVER                         # debug authentication issues

# Remote login
maize $> ssh -L 5901:localhost:5900 snoopy.eecs.umich.edu  # port forwarding
maize $> vncviewer localhost:1
# remotely enable gnome VNC server
gconftool-2 -s -t bool /desktop/gnome/remote_access/enabled true

# Start remote vnc session
server $ vncserver -localhost -NeverShared
client $ ssh -N -L 5901:localhost:5901 server.eecs.umich.edu
client $ vncviewer localhost:1
# edit server:~/.vnc/.vnc/xstartup to change xsession to gnome, etc.
server $ vncserver -kill :1  # end vnc server

# Intel SSH
cygwin $ export SSH_SOCKS_SERVER='socks://proxy-socks.jf.intel.com:1080'
cygwin $ ssh2.exe -L 22:localhost:22 ariel.eecs.umich.edu -s service
# now you can use ssh or svn
cygwin $ scp file localhost: # really sends the file to ariel.eecs.umich.edu


# Open an .rdp file for remote login to virtualsites
tsclient -x connect.rdp                       
rdesktop server:port -u awdeorio@UMICH.EDU

# Redirection in bash
some_command 2>&1 | less   # copies STDERR to STDOUT
diff <(echo a) <(echo b)   # <( ... ) syntax creates a temporary named pipe which makes the stdout of commands look and behave like a file

# crontab format
 +---------------- minute (0 - 59)
 |  +------------- hour (0 - 23)
 |  |  +---------- day of month (1 - 31)
 |  |  |  +------- month (1 - 12)
 |  |  |  |  +---- day of week (0 - 6) (Sunday=0 or 7)
 |  |  |  |  |
 *  *  *  *  *  command to be executed

# Check a disk with progress bar and no questions asked
fsck -aC /dev/<device>
touch /forcefsck && reboot  # force a filesystem check on reboot

# Gentoo:emerge - USE flag descriptions:
/usr/portage/profiles/use.desc
/usr/portage/profiles/use.local.desc

# Redhat:rpm
rpm -Uvh foo-1.0-1.i386.rpm  # install a package
rpm -ev foo.rpm
## compile and install a package from source (*.src.rpm)
rpm -ivh source-package  # installs the source in /usr/src/redhat/SOURCES
                         # installs the spec file in /usr/src/redhat/SPECS.
rpmbuild -bb thing.spec  # build rpm
rpm -Uvh     thing.rpm   # install rpm
rpm2cpio FILE.rpm | cpio -idmv # extra files from rpm

# Debian/Ubuntu apt
apt-get update                          # update repository
apt-get upgrade                         # upgrade packages, but NOT kernel
apt-get dist-upgrade                    # upgrade packages, including kernel
apt-cache search <package>              # find packages
apt-cache showpkg <package>             # get the details on a package

# Homebrew
brew update
brew upgrade
brew cleanup
brew cask cleanup
brew linkapps

# grep
grep -a -b -B100 -A100 phrase /dev/sda3 > file.txt  # recover deleted files
egrep -o "\w+([._-]\w)*@\w+([._-]\w)*\.\w{2,4}" -e  # email addresses
# grep for tab: In bash, as you are typing the quoted regular expression, hit Ctrl-V then the TAB key to get the TAB in there.

# sed
sed 1d        # print all but first line
sed '$d'      # print all but last line
sed -n '52p'  # print line number 52
sed '52q;d'   # print line number 52, efficient on large files
sed -n '45,50p' filename           # print line nos. 45-50 of a file
sed -n '51q;45,50p' filename       # same, but executes much faster
sed -i -e 's/before/after/g' file.txt  # replaces before with after
perl -pi -e 's/old_string/new_string/g' <files> # the perl alternative
echo abcd123 | sed 's/\([a-z]*\).*/\1/' # output "abcd" and delete the numbers
sed -n '/BEGIN/,/END/p'  # print all lines between "BEGIN" and "END"
sed 's/^/before/'       # prepend each line matching before"
sed '/before/d'         # delete lines matching "before"
sed -e '/before/q'      # print from beginning to line matching 'before'
sed -nr 's/@@  ([0-9]+\.?[0-9]*) ns total time to execute/\1/p' 
sed '1s/before/after/' FILE  # replace first line
FIXME: sed search and THEN do replace, e.g., '/searchterm/s/query/replace/'

# awk
echo -e '1\n2\n3' | awk '{ sum += $1 }; END { print sum }' # sum an input stream
awk '/Iowa/,/Montana/' # print section of a file between two regex (inclusive)
awk '{print $NF}'      # print last field
awk '{$1="";print}'    # print all but last field
awk '$1>=2{print}      # print if greater that 2

# Misc text processing
cut -c8-               # remove first 8 characters of a line
fold                   # word-wrap text
column -tns, FILE.csv  # pretty-print a csv file
test `tail -c 1 file`  # test if file ends in newline
expand                 # converts tabs into spaces
tac                    # reverse order of lines
rev                    # reverse order of characters
cat FILE | sort | uniq -c # frequency analysis of lines (histogram)
paste                  # print two files side-by-side
tr "\r\n" "\n"  FILE   # convert line endings to UNIX
cat FILE | tr -d -c ',\n' | awk '{print length}' # count commas
shuf                   # shuffle lines in a file
file FILE              # determine encoding of FILE
iconv -f UTF-8 -t ASCII//TRANSLIT INFILE -o OUTFILE  # convert UTF8 to ASCII

# Printing
lprm -P<printer>       # remove one job from queue
lpq  -P<printer>       # show printer queue status
lpstat -t              # show all status information for all printers
cupsdisable <printer>  # stop printer
cupsenable  <printer>  # start printer
enscript FILE          # pretty-print text file

# Disk imaging over a network
# create a backup of client to server
server $> nc -p 2222 -l > client-sda.img
client $> dd if=/dev/sda bs=16M | nc server.eecs.umich.edu 2222
# restore backup from server on to client
client $> nc -p 2222 -l > /dev/sda
server $> dd if=client-sda.img bs=16M | nc client.umich.edu 2222

# Back up and restore MBR excluding partition table
dd if=/dev/sda of=/home/herman/MBR.img bs=446 count=1 # backup MBR
dd if=/home/herman/MBR.img of=/dev/sda bs=446 count=1 # restore MBR
dd if=/dev/zero of=/dev/hda bs=446 count=1            # kill MBR, except table
dd if=/dev/zero of=/dev/hda bs=512 count=1            # kill ENTIRE MBR

# Rip ISO from cdrom
dd if=/dev/cdrom of=my_cd_image.iso

# /etc/init.d/ scripts
update-rc.d -f autofs remove # Ubuntu, remove
update-rc.d autofs defaults  # Ubuntu, add
chkconfig autofs off         # FC/Redhat
rc-update del autofs         # Gentoo

# All the words in the dictionary
/usr/share/dict/words
shuf /usr/share/dict/words | head -n1   # random word

# CPU usage (%)
top -b -n7 -d0.5 | grep ^Cpu | sed 1d | grep -oE '[0-9]+\.?[0-9]*% *id' | grep -oE '[0-9]+\.?[0-9]*' | awk '{sum+=$0} END {print sum/NR}'

# Changing CPU frequency governor
cpufreq-selector -g performance

# rsync
mount with "shortname=mixed"            # mount FAT32
rsync -rvtP --modify-window=1 --delete  # copy
rsync -rv --delete --checksum           # copy, using file checksum

# AFS
kdestroy                                  # delete Kerberos tickets
unlog                                     # delete AFS tokens
kinit [-5] [-l 30d] [awdeorio@UMICH.EDU]  # get Kerberos ticket
aklog                                     # get AFS tokens
aklog -cell umich.edu -k UMICH.EDU        # AFS tokens for UMICH cell
aklog -cell eecs.umich.edu -k UMICH.EDU   # AFS tokens for EECS cell
gssklog -cell engin.umich.edu             # AFS tokens for ENGIN cell
fs setacl -dir DIR -acl USER rlidwk       # give USER access to directory
find DIR -type d -exec fs setacl -dir {} -acl USER rlidwk \;
  # give USER access to DIR, recursively
find DIR -type d -exec fs setacl -dir {} -acl USER rlidwka \;
  # give USER access to DIR, recursively, with admin (note the "a")
fs setacl -dir DIR -acl USER rlidwk # give USER permission to DIR

# NFS
showmount -e 192.168.0.100              # see what's available
mount 192.168.0.100:/volume1/public nas # mount it

# Hardware and detection
top                                                # current memory usage
free                                               # memory only
cat /proc/cpuinfo                                  # CPU only
lspci                                              # see PCI devices
hwinfo                                             # all hardware
xinput --list                                      # see available input devices
xinput --test "AlpsPS/2 ALPS GlidePoint"           # test the device
xinput --list-props "AlpsPS/2 ALPS GlidePoint"     # see what one device can do
xinput --set-prop "AlpsPS/2 ALPS GlidePoint" 121 1 # change a property

# Converting docs
xlhtml - convert excel files
tofrodos
antiword
ppthtml - ppt file to html
enscript FILE.txt -o - | ps2pdf - FILE.pdf  # txt to pdf
pdftk PATH/*.pdf cat output output.pdf  # merge pages
pdftk FILE.pdf burst                    # explode pages

# Date and time
date '+%s'                                        # current time in seconds
date --date='Thu Nov  4 09:08:49 EDT 2010' '+%s'  # parse a date and reformat
date --date="1970-01-01 1187769064 sec GMT"       # Unix time to human
date --date @1187769064                           # Unix time to human
TZ='America/Detroit'; export TZ                   # change time zone
ntpdate europe.pool.ntp.org north-america.pool.ntp.org # sync clock

# Make scripts exit cleanly
trap exit 1 2 3 15

# GNU parallel
parallel --verbose                      # print cmd before executing it
parallel -v                             # print cmd+output after executing it
ls *.tar.bz2 | parallel -v -j3 tar xvjf # untar, 3 jobs in parallel
parallel -j+0                           # untar, use all CPUs
*/ -d | sed 's_/$__' | parallel -v -j+0 tar -cjf {}.tar.bz2 {}/ # create tar
killall -USR1 parallel                  # get list of running jobs
killall -TERM parallel                  # finish running jobs, no new jobs
echo >jobqueue; tail -f jobqueue | parallel  # start job queue
echo my_command my_arg >> jobqueue           # submit to job queue

# Patch
cd src/drivers/input/mouse
patch < patch-dell-e6510

# Shell math
expr 1 / 2                              # integer only
let A=1/2                               # integer only
echo "1 / 2" | bc -l                    # floating point
dc -e "3 k 1 2 /p"                      # floating point
sort file1 | uniq                       # unique patterns
sort file1 file2 | uniq                 # union
sort file1 file2 | uniq -d              # intersection
sort file1 file2 | uniq -u              # symmetric difference

# Compression
tar -cjf DIR.tar.bz2 DIR/               # compress directory
tar -xvjf DIR.tar.bz2                   # decompress directory
tar -xvjOf DIR.tar.bz2                  # cat tarball files to stdout
tar -tvjf DIR.tar.bz2                   # list contents of tarball
tar -xvjf DIR.tar.bz2 FILE              # extract FILE from tarball
zip --encrypt -r folder folder          # create encrypted zip archive
bzip2 FILE.bz2                          # compress a single file
bzcat FILE.bz2                          # dump compressed file to stdout
bunzip2 FILE.bz2                        # decompress a single file
gzip FILE.gz                            # compress a single file
gunzip FILE.gz                          # decompress a single file
zcat FILE.gz                            # dump compressed file to stdout
zgrep FILE.gz                           # grep for compressed files
zdiff FILE1.gz FILE2.gz                 # diff for compressed files
cat FILE.txt | gzip -f > FILE.txt.gz    # pipe into gzip

# C++ tools
g++ -g                                  # compile with debug support
valgrind -v --leak-check=full ./a.out   # check for memory errors
LIBARY_PATH                             # environment vars for tool installs
LD_LIBRARY_PATH
LD_RUN_PATH
CPATH
C_INCLUDE_PATH
CPLUS_INCLUDE_PATH
MANPATH

# Encrypted virtual partition with encfs
encfs ROOTDIR MOUNTPOINT   # enter "p" to create with defaults
encfs ROOTDIR MOUNTPOINT   # mount
fusermount -u MOUNTPOINT   # unmount
encfsctl passwd ROOTDIR    # change password

# Paths
readlink -f PATH           # return absolute path

# Serial ports
dmesg                      # devices connected recently, e.g., /dev/tty...
screen /dev/ttyACM0 9600   # text input/output at 9600 Baud
                           #   Ctrl-A,Shift-K to quit

# Controlling mouse setting in X
xinput                               # list devices
xinput watch-props "DualPoint Stick" # list settings for one device
xinput set-prop "DualPoint Stick" "Device Accel Profile" 2 # change setting
xinput set-prop "DualPoint Stick" 247 2
xinput set-prop "DualPoint Stick" 248 2
xinput set-prop "DualPoint Stick" 249 2
xinput set-prop "DualPoint Stick" 250 10

# Mount CD/DVD image
mount -o loop file.img /home/awdeorio/mnt/loop

# Change a bunch of file extensions using bash
ls *.txt | sed 'p;s/.C$/.cpp/' | xargs -L2 mv -v

# Create a random password
md5sum -      # enter some text, followedby CTRL-D


########################################
# Windows / Cygwin Specific

# open a file as if you double-clicked it
cygstart.exe FILE


########################################
# OS X Specific

# open a file as if you double-clicked it
open FILE
open -a "Google Chrome" FILE  # force use of a Google Chrome

# Get rid of annoying "damaged and can't be opened" message for downloads
xattr -r -d com.apple.quarantine /Users/awdeorio/mnt/finance

# Copy contents of FILE to clipboard from command line (OS X)
pbcopy < FILE

# Graphical diff on OS X
opendiff FILE1 FILE2 [-merge FILE3]

# unmount USB_DISK on OS X
diskutil unmount /Volumes/USB_DISK


########################################
# Java
java -jar myprog.jar                    # run a java program
jar -xvf                                # extract all files from jar archive


########################################
# Perl 

perl -V                                 # debug environment
PERL5LIB                                # environment variable for tool installs
cpan -i PACKAGE                         # install package


########################################
# Python

# Add this to source code to drop to a debugger
import pdb; pdb.set_trace();

# Check style
pylint SRC_FOLDER

# Enable tab-completion and history in Python shell.  Add this to ~/.pythonrc.py
import readline, rlcompleter
readline.parse_and_bind("tab: complete")

# Execute an IPython Notebook in headless mode.  Clears all output, runs the 
# entire notebook, and writes the result to an output .ipynb file
ipython nbconvert --to=notebook --ClearOutputPreprocessor.enabled=True --ExecutePreprocessor.enabled=True --output=OUTPUT.ipynb INPUT.ipynb

# include path for local packages
export PYTHONPATH=${HOME}/local/lib/python2.6:${PYTHONPATH}
export PYTHONUSERBASE=${HOME}/local

# set up local package installs
virtualenv ./venv                       # create
. ./venv/bin/activate                   # enable
pip install PACKAGE                     # install PACKAGE
deactivate                              # disable


########################################
# Ruby local install
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
export PATH="$PATH:$HOME/.rvm/bin"


########################################
# SQL

# sqlite3 Linux CLI
sqlite3 file.db                         # open connection to database from file

# MySQL Linux CLI
mysqladmin -u root password PASSWORD    # change root password
mysql -u root -pPASSWORD                # connect to db (NO SPACE!!!)
mysql.server start                      # start SQL server
mysql -u user db -p                     # open db
mysql -u user -p < SCRIPT               # run script
mysqldump -u user -pPASSWD DB > file.db # dump database to file

# SQL tid bits
PRIMARY KEY AUTO_INCREMENT              # avoid initializing ID's
TIMESTAMP DEFAULT CURRENT_TIMESTAMP     # avoid initializing timestamps

# SQL CLI
SHOW DATABASES;                         # list all databases
DROP DATABASE db;                       # delete database
USE db;                                 # open database db
SHOW TABLES;                            # list tables in db
DROP TABLE table;                       # delete table
INSERT INTO db (col, ...)               # add a row
VALUES ('val', ...);                    # ...


################################################################################# CAUTION: ENTERING GIT SECTION
#
########################################
# One-time setup for a user

# Sets the default name for git to use when you commit
git config --global user.name "Your Name Here"

# colors in git
git config --global color.diff auto
git config --global color.status auto
git config --global color.branch auto

# Set the default email for git to use when you commit
git config --global user.email "your_email@example.com"


########################################
# One-time setup for a local repository

cd PROJECT/
git init
git add .
git commit


########################################
# One-time setup for a shared repository

# make sure you are working in a shared directory (e.g., ssh, AFS, NFS, etc.)
ssh SERVER            # or navigate to shared directory using AFS, NFS, etc.
mkdir -p ~/opt/git/   # make directory
cd ~/opt/git/         # default directory for shared repositories
mkdir PROJECT.git     # shared repositories end in .git
git init --bare PROJECT.git/  # shared repositories are bare repositories

# If it's on AFS
find PROJECT.git -type d -exec fs setacl -dir {} -acl USER rlidwk \;

# on your local machine
git clone ssh://USERNAME@SERVER/~/opt/git/PROJECT.git
cd PROJECT
echo 'Hello World' > README  # create the first file
git add README
git commit
git push origin master


########################################
# Setup on github

# New repository
go to github.com and click "make a new repository"
git clone git@github.com:REPO/PROJECT.git
git clone https://github.com/REPO/PROJECT.git

# SSH keys
https://help.github.com/articles/generating-ssh-keys/

# remove sensitive data
https://help.github.com/articles/remove-sensitive-data/


########################################
# Daily git use

# get a local copy of a shared repository
# you only have to do this once.  Other options are file://, ssh://, https://
git clone ssh://USERNAME@SERVER/~/opt/git/PROJECT.git

# Change your email address for one project
git config user.email awdeorio@virtalabs.com

# update your local copy, merging from repository, manual
# (assuming you're tracking origin)
git fetch origin
git diff master origin/master           # see changes
git merge origin/master                 # this will be a FF if no local changes
git fetch --prune                       # remove stale local branches

# update your local copy, merging from repository, automatic
git pull       

# committing
git status
git add FILE # file to commit
git commit
git push

# undo
git checkout FILE # revert a file to last checked-in version
git reset --soft  # changes to tracked files are discarded
git reset --hard  # reset head to <commit>, files unchanged
git rm -r --cached DIR  # undo git add, without removing files
git clean -xf           # restore to "clean repo", including deleting extras

# recover a removed file  http://stackoverflow.com/questions/953481
git rev-list -n 1 HEAD -- <file_path>
git checkout <deleting_commit>^ -- <file_path>

# temporarily stash work, and restore clean set of files
git stash       # stash current modifications on stack
git stash list  # view stash stack
git stash apply # "unstash" top of stack

# ignoring files in git
add a .gitignore file to the PWD
add patterns to .gitignore
git add .gitignore

# view log
git log [FILE]
git log --oneline                   # less info
git log --oneline --decorate --graph --all # more info
git log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold blue)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all

# viewing old versions
git show REV:FILE
git show HEAD^ FILE  # look at last committed version
git show HEAD~4:FILE # 4th last commit

# get info about git connections
git remote                               # list names of remote repositories
git remote show origin                   # more info
git branch                               # list name of local branch

# Combine the staged changes with the previous commit and replace the previous
# commit with the resulting snapshot.  Running this when there is nothing
# staged lets you edit the previous commit’s message without altering its
# snapshot.
git commit --amend

########################################
# Tagging
git tag                                 # list tags
git tag TAG                             # apply lightweight tag
git tag -a TAG                          # apply annotated tag
git tag -a TAG REV                      # apply annotated tag to REV commit
git push --tags                         # make tags public
git checkout tags/TAG                   # checkout a tag as detacted HEAD
git checkout -b BRANCH                  # retain changes in a branch

########################################
# Branching 
git branch                              # view current and local branches
git branch -a                           # view all branches
git branch -vv                          # include tracking and commit info
git checkout BRANCH                     # switch to local BRANCH
git checkout --track origin/BRANCH      # switch to remote BRANCH
git checkout -b BRANCH                  # create a new branch and switch to it
git push origin BRANCH                  # push BRANCH to remote
git branch --set-upstream-to=origin/BRANCH BRANCH # fix tracking


########################################
# Comparing
git diff BRANCH1 BRANCH2                # diff two local branches
git diff master remotes/origin/dataset  # diff two remote branches
git mergetool --tool-help               # list available diff/merge tools
git config --global diff.tool TOOL      # use TOOL for merging
git config --global diff.tool --directory TOOL # use TOOL for dir merging, too

########################################
# Git Branching Model
# http://nvie.com/posts/a-successful-git-branching-model/
git checkout -b MYFEATURE develop # Start working on a new feature

# merge feature into develop branch
git checkout develop         # switch to develop branch
git merge --no-ff myfeature  # merge feature into develop, keep old branch info
git branch -d myfeature      # delete myfeature branch
git push origin develop      # push to server
git push origin ":myfeature" # remove branch from server

########################################
# Changing the location of a repository
git remote set-url origin NEW_URL
