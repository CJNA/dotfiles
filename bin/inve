#!/bin/bash

# inve
#
# usage: inve [COMMAND [ARGS]]
#
# For use with Ian Bicking's virtualenv tool. Attempts to find the root of
# a virtual environment. Then, executes COMMAND with ARGS in the context of
# the activated environment. If no COMMAND is given, activate defaults to a
# subshell.

VIRTUAL_ENV_DIRNAMES="
  .
  venv venv2 venv3
  .venv .venv2 .venv3
  env env2 env3 .env
  .env .env2 .env3
"

# First, locate the root of the current virtualenv
# Based on https://gist.github.com/datagrok/2199506#a-system-level-inve
while [ "$PWD" != "/" ]; do
  # Try all the possible virtual env directory names
  for VIRTUAL_ENV_RELATIVE in ${VIRTUAL_ENV_DIRNAMES}; do
	  # Stop here if this the root of a virtualenv
	  if [ -x ${VIRTUAL_ENV_RELATIVE}/bin/python ]; then
		  break 2  # break out of nested loop
	  fi
  done
	cd ..
done
if [ "$PWD" = "/" ]; then
	echo "Could not activate: no virtual environment found." >&2
	exit 1
fi

# Simple activate.  This duplicates the functionality of
# `source $VIRTUAL_ENV/bin/activate`.  However, if you've modified the
# activation script (the bash version anyways), then the subsheel invoked
# by this code won't contain those changes.
# export VIRTUAL_ENV="${PWD}/${VIRTUAL_ENV_RELATIVE}"
# export PATH="${VIRTUAL_ENV}/bin:${PATH}"
# unset PYTHON_HOME
# exec "${@:-$SHELL}"

# Active including customizations in $VIRTUAL_ENV/bin/activate.  We're going to
# source the original *bash* activation script, then start the subshell of
# the user's choice, which will inherit the environment variables exported by
# bash.  Keep in mind that your shell will run its startup script (.bashrc for
# bash) when starting up the subshell.  That means it will go out of its
# way to set its own PS1, ignoring the PS1 set by $VIRTUAL_ENV/bin/activate.
# All other evironment variables will be inherited by the subshell.
ACTIVATE="${PWD}/${VIRTUAL_ENV_RELATIVE}/bin/activate"
source ${ACTIVATE}
exec "${@:-$SHELL}"
